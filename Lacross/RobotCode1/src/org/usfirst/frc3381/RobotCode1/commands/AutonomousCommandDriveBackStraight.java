// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3381.RobotCode1.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3381.RobotCode1.Robot;
import org.usfirst.frc3381.RobotCode1.RobotMap;

public class AutonomousCommandDriveBackStraight extends Command {
	
	Double baseSpeed;
	Double maxSpeed;
	Double currentSpeed;
	Double distance;
	Double distanceRampDown;
	Boolean rampDown;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    public AutonomousCommandDriveBackStraight(Double distance) {
    	
    	this.distance = distance;
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveBase);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	Robot.driveBase.enableDriveBraking();
    	Robot.driveBase.slave();
    	Robot.driveBase.ramp();
    	Robot.driveBase.resetEncoder();
    	Robot.driveBase.resetYaw();
    	baseSpeed = RobotMap.prefs.getDouble("Base Speed", 0.45);
    	maxSpeed = RobotMap.prefs.getDouble("Max Speed", 1.0);
    	currentSpeed = baseSpeed;
    	distanceRampDown = 30.0;
    	rampDown = false;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	// Puts information on the SmartDashboard
    	SmartDashboard.putNumber("Turn Angle", Robot.driveBase.getHeading());
    	SmartDashboard.putNumber("Right Drive Encoder", Robot.driveBase.getRightEncodeDistance());
    	SmartDashboard.putNumber("Left Drive Encoder", Robot.driveBase.getLeftEncodeDistance());
    	
    	// Gets the Angle the robot is at
    	Double heading = Robot.driveBase.getHeading();
    	
    	if(currentSpeed <= maxSpeed && rampDown == false) {
    		currentSpeed = (currentSpeed + 0.02);
    	}
    	
    	if(distance - distanceRampDown <= Robot.driveBase.getRightEncodeDistance() && currentSpeed >= baseSpeed || distance - distanceRampDown <= Robot.driveBase.getLeftEncodeDistance() && currentSpeed >= baseSpeed) {
    		rampDown = true;
    		currentSpeed = (currentSpeed - 0.05);
    	}
    	
    	Double left = (currentSpeed + (0.025 * heading));
    	Double right = (currentSpeed - (0.025 * heading));
    	
    	SmartDashboard.putNumber("Current Speed", currentSpeed);
    	
    	Robot.driveBase.tankDrive(-left, -right);

    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	return Robot.driveBase.getRightEncodeDistance() <= distance || Robot.driveBase.getLeftEncodeDistance() <= distance;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveBase.setToZero();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
