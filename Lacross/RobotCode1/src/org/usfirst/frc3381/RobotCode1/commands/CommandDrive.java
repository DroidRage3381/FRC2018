// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3381.RobotCode1.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3381.RobotCode1.Robot;
import org.usfirst.frc3381.RobotCode1.RobotMap;

/**
 *
 */
public class CommandDrive extends Command {
	
	Double currentMove;
	Double setMove;
	Double rotate;
	Double liftHight;
	Double variant;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CommandDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveBase);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	Robot.driveBase.slave();
    	Robot.driveBase.disableDriveBraking();
    	variant = RobotMap.prefs.getDouble("Robot Speed variant", 1.0);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	
    	liftHight = Robot.lift.getliftEncoder();
    	boolean safe = liftHight <= Robot.lift.safeZone;
    	
//    	if(liftHight <= Robot.lift.safeZone) {
//    		Robot.driveBase.arcadeDrive(Robot.oi.joystick1);
//    	}
//    	else if(liftHight > Robot.lift.safeZone) {
//    		rotate = Robot.oi.joystick1.getX();
//    		setMove = Robot.oi.joystick1.getY();
//    		if(currentMove <= setMove) {
//    			currentMove = currentMove + (variant / liftHight);
//    			Robot.driveBase.arcadeDrive2(currentMove, rotate);
//    		}
//    		else if(currentMove >= setMove) {
//    			currentMove = currentMove - (variant / liftHight);
//    			Robot.driveBase.arcadeDrive2(currentMove, rotate);
//    		}
//    		Robot.driveBase.arcadeDrive2(currentMove, rotate);
//    	}
    	
    	Robot.driveBase.arcadeDrive(Robot.oi.joystick1);
    	
    	if(Robot.oi.joystick1.getTrigger() && safe || Robot.oi.joystick1.getRawButton(11) && safe) {
    		Robot.driveBase.shiftFast();
    	}
    	else {
    		Robot.driveBase.shiftSlow();
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveBase.enableDriveBraking();
    	Robot.driveBase.setToZero();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
