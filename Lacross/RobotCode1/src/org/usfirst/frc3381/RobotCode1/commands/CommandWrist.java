// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3381.RobotCode1.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3381.RobotCode1.Robot;

/**
 *
 */
public class CommandWrist extends Command {
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CommandWrist() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.wheelBlockGrabber);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	if(Robot.oi.gamepad1.getPOV() == 180) {
    		Robot.wheelBlockGrabber.setCount = 0;
    	}
    	
    	else if (Robot.oi.gamepad1.getPOV() == 270) {
    		Robot.wheelBlockGrabber.setCount = 50;
    	}
    	
    	else if (Robot.oi.gamepad1.getPOV() == 0) {
    		Robot.wheelBlockGrabber.setCount = 95;
    	}
    	
    	else {
    		
    	}
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	
//    	Robot.wheelBlockGrabber.wrist = Robot.wheelBlockGrabber.getWristPosition();
//    	SmartDashboard.putNumber("Current Count Value", Robot.wheelBlockGrabber.count);
//    	SmartDashboard.putNumber("Set Count Value", Robot.wheelBlockGrabber.setCount);
//    	
//    	if(Robot.wheelBlockGrabber.count > Robot.wheelBlockGrabber.setCount) {
//    		Robot.wheelBlockGrabber.wristDown();
//    		if (Robot.wheelBlockGrabber.wrist && Robot.wheelBlockGrabber.count%2 == 0) {
//        		Robot.wheelBlockGrabber.count = Robot.wheelBlockGrabber.count - 1;
//        	} else if (!Robot.wheelBlockGrabber.wrist && Robot.wheelBlockGrabber.count%2 != 0) {
//        		Robot.wheelBlockGrabber.count = Robot.wheelBlockGrabber.count - 1;
//        	}
//    	}
//    	
//    	else if(Robot.wheelBlockGrabber.count < Robot.wheelBlockGrabber.setCount) {
//    		Robot.wheelBlockGrabber.wristUp();
//    		if (Robot.wheelBlockGrabber.wrist && Robot.wheelBlockGrabber.count%2 == 0) {
//        		Robot.wheelBlockGrabber.count = Robot.wheelBlockGrabber.count + 1;
//        	} else if (!Robot.wheelBlockGrabber.wrist && Robot.wheelBlockGrabber.count%2 != 0) {
//        		Robot.wheelBlockGrabber.count = Robot.wheelBlockGrabber.count + 1;
//        	}
//    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	return false;
//        return Robot.wheelBlockGrabber.count == Robot.wheelBlockGrabber.setCount;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.wheelBlockGrabber.wristPowZero();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
