// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3381.RobotCode1;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3381.RobotCode1.commands.*;
import org.usfirst.frc3381.RobotCode1.subsystems.*;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    // Autonomous choose
    SendableChooser<Command> chooser = new SendableChooser<>();
    
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveBase driveBase;
    public static WheelBlockGrabber wheelBlockGrabber;
    public static Lift lift;
    public static LED lED;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBase = new DriveBase();
        wheelBlockGrabber = new WheelBlockGrabber();
        lift = new Lift();
        lED = new LED();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        
        // Creates camera 1
        UsbCamera camera1 = CameraServer.getInstance().startAutomaticCapture();
        
        // Camera 1's resolution
        int width1;
        int hight1;
        // Gets resolution from smartdashboard and sets the values
        width1 = RobotMap.prefs.getInt("Camera 1 Width", 640);
        hight1 = RobotMap.prefs.getInt("Camera 1 Hight", 480);
        // Sets camera resolution
        camera1.setResolution(width1, hight1);
        
        // Camera 1's brightness
        int brightness1;
        // Gets brightness from smartdashboard and sets the values
        brightness1 = RobotMap.prefs.getInt("Camera 1 Brightness", 50);
        // Sets the camera's brightness to value from smartdashboard
        camera1.setBrightness(brightness1);
        
        // Camera 1's frame rate
        int framerate1;
        // Gets frame rate form smartdashboard and sets the value
        framerate1 = RobotMap.prefs.getInt("Camera 1 Frame Rate", 16);
        // Sets the camera's frame rate to value from smartdashboard
        camera1.setFPS(framerate1);
        
//        // Creates camera 2
//        UsbCamera camera2 = CameraServer.getInstance().startAutomaticCapture();
//        
//        // Camera 2's resolution
//        int width2;
//        int hight2;
//        // Gets resolution from smartdashboard and sets the values
//        width2 = RobotMap.prefs.getInt("Camera 2 Width", 640);
//        hight2 = RobotMap.prefs.getInt("Camera 2 Hight", 480);
//        // Sets camera resolution
//        camera2.setResolution(width2, hight2);
//        
//        // Camera 2's brightness
//        int brightness2;
//        // Gets brightness from smartdashboard and sets the values
//        brightness2 = RobotMap.prefs.getInt("Camera 2 Brightness", 75);
//        // Sets the camera's brightness to value from smartdashboard
//        camera2.setBrightness(brightness2);
//        
//        // Camera 2's frame rate
//        int framerate2;
//        // Gets frame rate form smartdashboard and sets the value
//        framerate2 = RobotMap.prefs.getInt("Camera 1 Brightness", 75);
//        // Sets the camera's frame rate to value from smartdashboard
//        camera2.setFPS(framerate2);

        
        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addObject("Autonomous Command Right", new AutonomousCommandRight());
        chooser.addObject("Autonomous Command Left", new AutonomousCommandLeft());
        chooser.addObject("Autonomous Command Center", new AutonomousCommandCenter());
        chooser.addDefault("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
    // This makes it so we can use a quadrature encoder plugged in through the TalonSRX
        // Right side
        RobotMap.driveBaseTalonSRXMasterRight.set(ControlMode.Position, 0);
        RobotMap.driveBaseTalonSRXMasterRight.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 10);
        RobotMap.driveBaseTalonSRXMasterRight.configSelectedFeedbackCoefficient(0.0040906154342448, 0, 10);
//        RobotMap.driveBaseTalonSRXMasterRight.setSensorPhase(true);
        
        // Left side
        RobotMap.driveBaseTalonSRXMasterLeft.set(ControlMode.Position, 0);
        RobotMap.driveBaseTalonSRXMasterLeft.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 10);
        RobotMap.driveBaseTalonSRXMasterLeft.configSelectedFeedbackCoefficient(0.0040906154342448, 0, 10);
        
        // Lift Encoder
        Robot.lift.resetEncoder();
        
        // For Autonomous chooser on the SmartDashboard
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
}
