// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3381.RobotCode1.subsystems;

import java.util.concurrent.TimeUnit;

import org.usfirst.frc3381.RobotCode1.RobotMap;
import org.usfirst.frc3381.RobotCode1.commands.*;

import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.Joystick;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class OldDriveBase extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController sparkOldLeftSide = RobotMap.oldDriveBaseSparkOldLeftSide;
    private final SpeedController sparkOldRightSide = RobotMap.oldDriveBaseSparkOldRightSide;
    private final RobotDrive robotDrive21 = RobotMap.oldDriveBaseRobotDrive21;
    private final Encoder quadratureEncoderOldDriveBase = RobotMap.oldDriveBaseQuadratureEncoderOldDriveBase;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    DifferentialDrive drive = new DifferentialDrive(sparkOldRightSide, sparkOldLeftSide);
    
    private final AHRS navx = RobotMap.navx;

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
 public void arcadeDrive(Joystick stick){
    	
    	double rotate = stick.getX();
    	double move = stick.getY();
    	
    	drive.arcadeDrive(move, rotate, true);
    	
    }
    
    public void driveWithValues ( double moveValue , double rotateValue){
    	
    	drive.arcadeDrive(moveValue, rotateValue);
    
    }
    
    public void tankDrive ( double leftValue , double rightValue ){
    	
    	drive.tankDrive(-leftValue, -rightValue);
    	
    }
    
    
    public void setToZero (){
    	
    	sparkOldLeftSide.set(0);
    	sparkOldRightSide.set(0);
    	
    }
    
    public void resetEncoder (){
    	
    	quadratureEncoderOldDriveBase.reset();
    	
    }
    
    public void resetYaw(){
    	
    	navx.reset();
    	
    }
    
    public double getDistance (){
    	
    	return quadratureEncoderOldDriveBase.getDistance();
    	
    }
    
    
    public double getHeading(){
    	
    	return navx.getAngle();
    	
    }
    
    public void pause() {
    	long timeout = RobotMap.prefs.getLong("Timeout in Seconds", 1);
    	try {
			TimeUnit.SECONDS.sleep(timeout);
		} catch (InterruptedException e) {}
    }

}

