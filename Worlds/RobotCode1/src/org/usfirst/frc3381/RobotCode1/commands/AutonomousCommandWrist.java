// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3381.RobotCode1.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3381.RobotCode1.Robot;

/**
 *
 */
public class AutonomousCommandWrist extends Command {
	
	int desiredPosition;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    public AutonomousCommandWrist(Integer desiredPosition) {
    	
    	this.desiredPosition = desiredPosition;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.wheelBlockGrabber);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	
    	Robot.wrist.speed = 0.0;
    	
    	Robot.wrist.setPoint = desiredPosition - Robot.wrist.currentPosition;
    	//Robot.intake.currentPosition = Robot.intake.currentPosition + setPoint;
    	
    	if(Robot.wrist.setPoint < 0) {
    		Robot.wrist.setPoint = Robot.wrist.setPoint * -1; // turns a negative set-point positive
    		Robot.wrist.speed = Robot.wrist.speed * -1; // sets the speed negative for reverse
    		Robot.wrist.isGoingDown = false;
    	} else {
    		Robot.wrist.isGoingDown = true;
    	}
    	
    	Robot.wrist.resetCount();
    	
    	SmartDashboard.putNumber("Wrist: setPoint", Robot.wrist.setPoint);
    	SmartDashboard.putBoolean("Wrist: isGoingDown", Robot.wrist.isGoingDown);

    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	Robot.wrist.setSpeed(Robot.wrist.speed);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	return false;
//    	Robot.wrist.currentCount = Robot.wrist.getCount();
//    	SmartDashboard.putNumber("Wrist: currentCount", Robot.wrist.currentCount);
//        return Robot.wrist.currentCount >= Robot.wrist.setPoint;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.wrist.setSpeed(0);
    	
    	if(Robot.wrist.isGoingDown) {
    		Robot.wrist.currentPosition = Robot.wrist.currentPosition + Robot.wrist.currentCount;
    	} else {
    		Robot.wrist.currentPosition = Robot.wrist.currentPosition - Robot.wrist.currentCount;
    	}
    	
    	SmartDashboard.putNumber("Wrist: currentPosition", Robot.wrist.currentPosition);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
