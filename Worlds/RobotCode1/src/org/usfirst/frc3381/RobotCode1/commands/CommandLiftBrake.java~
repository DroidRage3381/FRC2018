// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3381.RobotCode1.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3381.RobotCode1.Robot;
import org.usfirst.frc3381.RobotCode1.RobotMap;

/**
 *
 */
public class CommandLiftBrake extends Command {

	Double P, I, D;
	Double setPoint;
	Double currentPosition;
	Double previousError;
	Double error;
	Double integral;
	Double derivative;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CommandLiftBrake() {
        setRunWhenDisabled(true);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.forklift);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	
    	P = RobotMap.prefs.getDouble("P", 0);
    	I = RobotMap.prefs.getDouble("I", 0);
    	D = RobotMap.prefs.getDouble("D", 0);
    	
    	Robot.forklift.setPID(P, I, D);
    	
    	setPoint = Robot.forklift.getLiftEncoderDistance();
    	
    	Robot.forklift.setSetpoint(setPoint);
    	
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	// Continuously sets currentPosition to the current encoder reading
    	currentPosition = Robot.forklift.getLiftEncoderDistance();
    	
    	error = setPoint - currentPosition;
    	integral += (error*0.02);
    	derivative = (error - previousError) / 0.02;
    	Robot.forklift.pidOutput(P*error + I*integral + D*derivative);

    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
