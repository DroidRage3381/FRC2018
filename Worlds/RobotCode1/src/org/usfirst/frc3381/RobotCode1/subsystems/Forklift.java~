// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3381.RobotCode1.subsystems;

import org.usfirst.frc3381.RobotCode1.RobotMap;
import org.usfirst.frc3381.RobotCode1.commands.PIDCommandLiftBrake;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Forklift extends Subsystem {

//	public Double setPoint;
	public Boolean disableBrake;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController sparkLift = RobotMap.forkliftSparkLift;
    private final Encoder quadratureEncoderLift = RobotMap.forkliftQuadratureEncoderLift;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new PIDCommandLiftBrake());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    // Used to move the lift up
    public void liftUp(){
    	
    	sparkLift.set(-0.8);
    	
    }
    
    // Used to move the lift down
    public void liftDown(){
    	
    	sparkLift.set(0.6);
    	
    }
    
    // Used to move the lift in autonomous
    public void autoLift( double lift){
    	
    	sparkLift.set(lift);
    	
    }
    
    // Sets motor power to zero
    public void setToZero(){
    	
    	sparkLift.set(0);
    	
    }
    
//    public double getForkliftMotor() {
//    	
//    	return sparkLift.get();
//    	
//    }
    
    // Resets the lift encoder
    public void resetEncoder() {
    	
    	quadratureEncoderLift.reset();
    	
    }
    
    // Gets the encoders distance
    public double getLiftEncoderValue() {
    	
    	return quadratureEncoderLift.get();
    	
    }
    
}

